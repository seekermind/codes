import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import numpy as np

#date-09/02/20
x1 = [249.4, 255.6, 259.8, 262.7, 267, 272.6, 276.6, 279.6, 282.4, 286.7, 288.8, 247.5, 244.8, 242.6, 239.5, 236.8, 232.9, 230.8, 226.4, 220.8, 217.6, 212.9]
v1 = [4.19, 4.21, 4.24, 4.23, 4.20, 4.16, 4.06, 4.02, 4, 3.94, 3.92, 4.18, 4.18, 4.16, 4.14, 4.11, 4.07, 4.05, 3.99, 3.92, 3.87, 3.80]
#i = [8.21, 8.22, 8.22, 8.27, 8.39, 8.58, 8.77, 8.89, 8.99, 9.15, 9.25, 8.23, 8.27, 8.33, 8.40, 8.48, 8.59, 8.68, 8.84, 9.06, 9.20, 9.38]
#R = 200

#date-11/02/20
x2 = [211.1, 213.3, 215.8, 218.3, 221.5, 224.6, 227, 231.1, 234.9, 239.1, 241.5, 242.9, 244.1, 245.9, 246.8, 247.9, 248.8, 249.9, 251.1, 253.2, 254.4, 257.7, 261.3, 264.8, 268.5, 271.5, 275.9, 280.3, 284.8, 287.9, 290.1, 295.2]
v2 = [3.78, 3.82, 3.85, 3.89, 3.94, 3.98, 4.02, 4.06, 4.10, 4.14, 4.16, 4.17, 4.18, 4.19, 4.19, 4.20, 4.20, 4.20, 4.20, 4.21, 4.21, 4.20, 4.18, 4.17, 4.14, 4.13, 4.08, 4.02, 3.96, 3.94, 3.91, 3.84]
#i = [9.44, 9.34, 9.24, 9.14, 9.00, 8.87, 8.79, 8.63, 8.50, 8.38, 8.33, 8.31, 8.28, 8.25, 8.25, 8.24, 8.22, 8.22, 8.21, 8.22, 8.22, 8.25, 8.31, 8.38, 8.49, 8.59, 8.73, 8.91, 9.07, 9.19, 9.25, 9.45]
#R = 200

#date-11/02/20
x3 = [215.1, 218.5, 221.2, 225.2, 228.3, 231.3, 234.5, 237.6, 241.3, 243, 246, 247.5, 248.5, 249.5, 250.8, 252.5, 255.9, 260.1, 263.2, 267.7, 270.6, 273.2, 275.6, 279.6]
v3 = [3.62, 3.66, 3.7, 3.74, 3.77, 3.8, 3.83, 3.86, 3.88, 3.88, 3.88, 3.89, 3.89, 3.89, 3.89, 3.89,3.89, 3.87, 3.85, 3.81, 3.79, 3.76, 3.73, 3.68]
#i = [8.34, 8.22, 8.13, 8.01, 7.92, 7.84, 7.77, 7.71, 7.67, 7.66, 7.64, 7.64, 7.64, 7.65, 7.65, 7.68, 7.74, 7.8, 7.88, 7.99, 8.08, 8.16, 8.22, 8.35]
#R = 300

#date-11/02/20
x4 = [200.8, 210.3, 206.8, 213.3, 219.1, 224.4, 229.1, 234.1, 239.2, 244.4, 250.3, 246.3, 254.3, 260.4, 265.4, 270.3, 275.6, 279, 284.4, 288.7, 293.4, 241.5]
v4 = [3.20, 3.34, 3.29, 3.38, 3.45, 3.51, 3.55, 3.58, 3.61, 3.61, 3.60, 3.61, 3.59, 3.56, 3.51, 3.46, 3.41, 3.38, 3.31, 3.27, 3.20, 3.60]
#i = [8.04, 7.77, 7.88, 7.69, 7.53, 7.40, 7.32, 7.25, 7.21, 7.20, 7.25, 7.22, 7.31, 7.41, 7.51, 7.62, 7.77, 7.84, 7.97, 8.05, 8.15, 7.22]
#R = 400 

#trisl-by-pankaj
x5 = [8, 18, 37, 94, 138, 186, 234, 283, 377, 320, 418, 478, 520, 571, 760, 970, 1031, 1130, 1300, 1465]
v5 = [0.241, 0.360, 0.661, 1.64, 2.43, 3.32, 4.09, 3.99, 2.96, 3.51, 2.68, 2.32, 2.12,1.93, 1.41, 1.11, 1.07, 0.964, 0.827, 0.773]

#date-18/02/20
x6 = [82.7, 112.5, 140, 151, 159, 168.1, 175.5, 185.2, 198.4, 209.6, 228.8, 237.4, 242.4, 246.5, 250.6, 251.9, 256.4, 261.1, 265.3, 277.1, 285.3, 295.9, 322.6, 348.4, 370.4, 383.7, 393.0, 401.2, 411.5, 423, 450.1, 485.4, 525, 574.7, 641, 727, 819.7, 900, 970, 1136, 1220, 1421, 1923]
v6 = [1.50, 2.0, 2.45, 2.64, 2.79, 2.96, 3.10, 3.29, 3.52, 3.72, 4.02, 4.11, 4.14, 4.17, 4.19, 4.20, 4.19, 4.17, 4.15, 4.04, 3.92, 3.80, 3.47, 3.20, 3.01, 2.92, 2.83, 2.77, 2.71, 2.63, 2.47, 2.27, 2.09, 1.90, 1.7, 1.48, 1.32, 1.20, 1.10, 0.946, 0.894, 0.765, 0.575]
R6 = 200

#date-19/02/20
x7 = [92, 111, 140, 158, 172.4, 178.3, 188, 212.8, 232.6, 238, 242, 246.9, 253, 257, 274, 280.9, 290, 315, 348, 380, 359.7, 370, 403.2, 434.8, 475, 526.9, 578, 625, 675, 728, 784, 854, 902, 978, 1048]
v7 = [1.55, 1.84, 2.30, 2.60, 2.87, 2.98, 3.13, 3.55, 3.78, 3.80, 3.81, 3.82, 3.81, 3.80, 3.65, 3.58, 3.47, 3.19, 2.87, 2.63, 2.77, 2.70, 2.46, 2.28, 2.07, 1.85, 1.68, 1.55, 1.43, 1.32, 1.23, 1.12, 1.06, 0.976, 0.908]
R7 = 315

#date-19/02/20
x8 = [82.9, 110, 138, 147, 157, 166, 176, 203, 227, 237, 242, 245.5, 248, 255, 262.5, 270, 284, 304, 333, 360, 370, 383, 414, 467, 525, 576, 659, 745, 836, 940, 1078]
v8 = [1.30, 1.70, 2.14, 2.30, 2.47, 2.62, 2.80, 3.26, 3.55, 3.61, 3.62, 3.63, 3.62, 3.61, 3.55, 3.48, 3.32, 3.10, 2.83, 2.60, 2.53, 2.44, 2.24, 1.97, 1.74, 1.58, 1.37, 1.20, 1.06, 0.938, 0.814]
R8 = 400

#x = [x1, x2, x3, x4, x5, 
x = [x6, x7, x8]
#v = [v1, v2, v3, v4, v5, 
v = [v6, v7, v8]
R = [R6, R7, R8]

x = np.array(x)
v = np.array(v)

[ print(freq/15, volt*15) for freq, volt in zip(x[2],v[2])]

"""
def fu(f, v_in, R_0, f_max):
    return v_in*(np.sqrt(((((R_0/(0.055*2*3.1416*f))**2)*(1-f**2/(f_max)**2)**2)+1))**-1)




#i = np.array(i)


#i = i/1000

#arr = [max(v)/np.sqrt(2) for i in range(0,len(x))]

x_0 = np.arange(0.0, 2000, 1)
q = [0]
R_fit = [0]
for i in range(0, len(x)):
    plt.plot(x[i], v[i], 'o', label='R = ' + str(R[i]))
    IG = [5,100, 250]
    popt, pcov = curve_fit(fu, x[i], v[i], IG)
    print(popt)
    v_root2 = popt[0]/(2**0.5)
    dx = 0.0001
    f_c = []
    y = fu(x_0, *popt)
    for freq in np.arange(100,450,0.01):
        if (fu(freq, *popt)-v_root2)**2 < dx**2:
            f_c += [freq]
    q += [popt[2]/(f_c[-1]-f_c[0])]
    R_fit += [popt[1]]
    plt.plot(x_0, y, label='R = ' + str(R[i]))
    #plt.plot(x_0, v_max)

#plt.plot(R_fit,q,'o')
#plt.text(800, 3, "V_in = " + str(popt[0]) + ", R = " + str(popt[1]))
plt.legend()
plt.grid(b=True, which='both', axis='both', linestyle='--')
plt.minorticks_on()

plt.show()
"""
